{"version":3,"sources":["SpotifyContext.tsx","SplashScreen.tsx","Setup.tsx","hooks/useTopSongs.tsx","hooks/usePrevious.tsx","hooks/useFilterTracksByBPM.tsx","Songs.tsx","hooks/useUserSongs.tsx","Success.tsx","AuthenticatedRoute.tsx","SpotifyProvider.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["_default","expiresAt","isAuth","api","userID","React","Splash","useContext","SpotifyContext","className","to","useStyles","makeStyles","root","padding","buttons","button","marginLeft","marginRight","link","textDecoration","table","maxWidth","marginBottom","emptyFunction","Setup","useState","bpmRange","setBpmRange","classes","getSongsURI","useCallback","useUserArtists","pathname","search","Box","display","flexDirection","TableContainer","Table","size","TableHead","TableRow","TableCell","TableBody","Slider","value","onChange","_","newBpm","valueLabelDisplay","aria-labelledby","step","min","max","justifyContent","Button","variant","color","onClick","style","usePrevious","ref","useRef","useEffect","current","tempoMap","Map","minWidth","useSongs","userSongs","tracks","setTracks","isLoadingMore","setIsLoadingMore","trackCount","setTrackCount","madeFirstRequest","setMadeFirstRequest","offset","length","loadMore","getMySavedTracks","limit","then","data","total","newTracks","items","map","i","track","concat","finally","loadMoreRef","hasMore","useUserSongs","topSongs","getPlaylistTracks","useTopSongs","Songs","selectedTrackInfo","setSelectedTrackInfo","playlistName","setPlaylistName","history","useHistory","params","URLSearchParams","window","location","get","minBpm","maxBpm","isLoadingMoreSongs","filteredTracks","setFilteredTracks","isLoading","setIsLoading","unfetchedIDs","filter","id","has","fetchTempoAndRecalculate","getAudioFeaturesForTracks","audio_features","forEach","feature","set","tempo","updatedTracks","fetchedTempo","prevTracksLength","useFilterTracksByBPM","isLoadingFilterData","isCreateButtonDisabled","trim","TextField","label","event","target","createPlaylist","name","public","description","chunkedURIs","array","result","chunk","slice","push","chunkArray","info","uri","Promise","all","uris","addTracksToPlaylist","disabled","Checkbox","indeterminate","checked","isSelected","includes","hover","role","selectedIndex","indexOf","newSelected","handleClick","artists","a","join","album","CircularProgress","Success","playlistData","setPlaylistData","getPlaylist","external_urls","images","usePlaylistDetails","useParams","playlistid","href","spotify","SCOPES","AuthenticatedRoute","props","encodeURI","process","SpotifyWebApi","SpotifyProvider","children","setUserID","hashParams","hash","substr","accessTokenFromAuth","expiresInFromAuth","accessToken","setAccessToken","setExpiresAt","initAPI","token","getMe","prevAccessTokenFromAuth","prevExpiresInFromAuth","Date","getTime","providerValue","useMemo","Provider","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","require","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMASMA,G,YAA2B,CAC/BC,UAAW,KACXC,QAAQ,EACRC,IAAK,KACLC,OAAQ,OAGKC,kBAAoBL,G,QCTpB,SAASM,IAAU,IACxBJ,EAAWK,qBAAWC,GAAtBN,OAER,OACE,8BACE,wBAAQO,UAAU,gBAAlB,SACE,cAAC,IAAD,CAAMC,GAAG,mBAAT,SAA6BR,EAAS,WAAa,c,qGCSrDS,EAAYC,YAAW,CAC3BC,KAAM,CACJC,QAAS,IAEXC,QAAS,CACPD,QAAS,IAEXE,OAAQ,CACNC,WAAY,GACZC,YAAa,IAEfC,KAAM,CACJC,eAAgB,QAElBC,MAAO,CACLC,SAAU,IACVC,aAAc,MAIZC,EAAgB,aACP,SAASC,IAAS,IAAD,EACEC,mBAAS,CAAC,GAAI,MADhB,mBACvBC,EADuB,KACbC,EADa,KAGtB1B,EAAWK,qBAAWC,GAAtBN,OAMF2B,EAAUlB,IACVmB,EAAcC,uBAClB,SAACC,GACC,MAAO,CACLC,SAAU,mBACVC,OAAO,qBAAD,OAAuBF,EAAvB,oBAAiDL,EAAS,GAA1D,oBAAwEA,EAAS,OAG3F,CAACA,IAGH,OAAKzB,EAGH,eAACiC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,SAAS5B,UAAWoB,EAAQhB,KAA9D,UACE,cAACyB,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAOC,KAAK,SAAS/B,UAAWoB,EAAQR,MAAxC,UACE,cAACoB,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,0BACA,cAACA,EAAA,EAAD,yCAGJ,eAACC,EAAA,EAAD,WACE,eAACF,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,uBACA,cAACA,EAAA,EAAD,8BAEF,eAACD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,wBACA,cAACA,EAAA,EAAD,2BAEF,eAACD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,8BAEF,eAACD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,wBACA,cAACA,EAAA,EAAD,sCAKR,iDACiBhB,EAAS,GAD1B,MACiCA,EAAS,MAE1C,cAACkB,EAAA,EAAD,CACEC,MAAOnB,EACPoB,SApDe,SAACC,EAAQC,GAC5BrB,EAAYqB,IAoDRC,kBAAkB,KAClBC,kBAAgB,eAChBC,KAAM,EACNC,IArFQ,GAsFRC,IArFQ,MAuFV,eAACnB,EAAA,EAAD,CACEC,QAAQ,OACRC,cAAc,MACd5B,UAAWoB,EAAQd,QACnBwC,eAAe,eAJjB,UAME,cAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,QAASnC,EACTf,UAAWoB,EAAQb,OAJrB,SAOE,cAAC,IAAD,CACEN,GAAIoB,GAAY,GAChB8B,MAAO,CAAExC,eAAgB,OAAQsC,MAAO,SAF1C,mDAOF,cAACF,EAAA,EAAD,CACEC,QAAQ,YACRE,QAASnC,EACTf,UAAWoB,EAAQb,OAHrB,SAKE,cAAC,IAAD,CACEN,GAAIoB,GAAY,GAChB8B,MAAO,CAAExC,eAAgB,OAAQsC,MAAO,SAF1C,yDArEY,6B,YC3DtB,IAEMlC,EAAgB,aCJP,SAASqC,EAAef,GAGrC,IAAMgB,EAAMC,mBAQZ,OALAC,qBAAU,WACRF,EAAIG,QAAUnB,IACb,CAACA,IAGGgB,EAAIG,QCNb,IAAMC,EAAW,IAAIC,I,+BCiBfxD,EAAYC,YAAW,CAC3BC,KAAM,CACJC,QAAS,IAEXO,MAAO,CACL+C,SAAU,KAEZpD,OAAQ,CACNC,WAAY,GACZC,YAAa,MAmBjB,SAASmD,EACPrC,GAGA,IAAMsC,ECpDO,WAA8D,IAAD,EAC9C5C,mBAAS,IADqC,mBACnE6C,EADmE,KAC3DC,EAD2D,OAGhC9C,oBAAkB,GAHc,mBAGnE+C,EAHmE,KAGpDC,EAHoD,OAItChD,mBAAiB,GAJqB,mBAInEiD,EAJmE,KAIvDC,EAJuD,OAK1BlD,oBAAkB,GALQ,mBAKnEmD,EALmE,KAKjDC,EALiD,KAOlE3E,EAAQI,qBAAWC,GAAnBL,IAEF4E,EAASR,EAAOS,OAChBC,EAAWlD,uBAAY,WAC3B+C,GAAoB,GACpBJ,GAAiB,GACjBvE,EACG+E,iBAAiB,CAAEC,MAAO,GAAIJ,WAC9BK,MAAK,SAACC,GACLT,EAAcS,EAAKC,OACnB,IAAMC,EAAYF,EAAKG,MAAMC,KAC3B,SAACC,GAAD,OAAyCA,EAAEC,SAE7CnB,EAAUD,EAAOqB,OAAOL,OAEzBM,SAAQ,WACPnB,GAAiB,QAEpB,CAACvE,EAAKoE,EAAQQ,IACXe,EAAc/B,iBAAOkB,GAE3BjB,qBAAU,WACc,IAAlBO,EAAOS,QACTc,EAAY7B,YAEb,CAACM,IAEJ,IAAMwB,GAAWlB,GAAoBN,EAAOS,OAASL,EACrD,MAAO,CAACJ,EAAQU,EAAUc,EAAStB,GDiBjBuB,GACZC,EHlDO,WAA6D,IAAD,EAC7CvE,mBAAS,IADoC,mBAClE6C,EADkE,KAC1DC,EAD0D,KAGjErE,EAAQI,qBAAWC,GAAnBL,IAgBR,OAdiB4B,uBAAY,WAC3B5B,EAAI+F,kBATkB,0BASmBd,MAAK,SAACC,GAC7C,IAAMd,EAASc,EAAKG,MAAMC,KAAI,qBAAGE,SACjCnB,EAAUD,QAEX,CAACpE,IASG,CAACoE,EAAQ/C,GAAe,GAAO,GG+BrB2E,GAEjB,OAAOnE,EAAiBsC,EAAY2B,EAGvB,SAASG,IAAS,IAAD,MACoB1E,mBAAsB,IAD1C,mBACvB2E,EADuB,KACJC,EADI,OAEU5E,mBAAiB,IAF3B,mBAEvB6E,EAFuB,KAETC,EAFS,OAGEjG,qBAAWC,GAAnCN,EAHsB,EAGtBA,OAAQC,EAHc,EAGdA,IAAKC,EAHS,EAGTA,OACfyB,EAAUlB,IACV8F,EAAUC,cAEVC,EAAS,IAAIC,gBAAgBC,OAAOC,SAAS5E,QAE7CF,EAAoD,SAAnC2E,EAAOI,IAAI,oBAC5BC,IAAS,UAAEL,EAAOI,IAAI,kBAAb,QAA2B,KACpCE,IAAS,UAAEN,EAAOI,IAAI,kBAAb,QAA2B,KAXZ,EAa0B1C,EACtDrC,GAd4B,mBAavBuC,EAbuB,KAafU,EAbe,KAaLc,EAbK,KAaImB,EAbJ,ODjDjB,SACb3C,EACAyC,EACAC,GACyB,IAAD,EACoBvF,mBAAS,IAD7B,mBACjByF,EADiB,KACDC,EADC,KAEhBjH,EAAQI,qBAAWC,GAAnBL,IAFgB,EAGUuB,oBAAkB,GAH5B,mBAGjB2F,EAHiB,KAGNC,EAHM,KASlBC,EAAehD,EAClBiD,QAAO,gBAAGC,EAAH,EAAGA,GAAH,OAA6BvD,EAASwD,IAAID,MACjDhC,KAAI,qBAAGgC,MACJE,EAA2B5F,uBAAY,WACf,IAAxBwF,EAAavC,SAGjBsC,GAAa,GACbnH,EACGyH,0BAA0BL,GAC1BnC,MAAK,YAA2D,EAAxDyC,eACEC,SAAQ,SAACC,GACD,MAAXA,GAGJ7D,EAAS8D,IAAID,EAAQN,GAAIM,EAAQE,UAEnC,IAAMC,EAAgB3D,EAAOiD,QAAO,SAAC7B,GACnC,IAAMwC,EAAejE,EAAS6C,IAAIpB,EAAM8B,IACxC,OACkB,MAAhBU,GACAA,GAAgBnB,GAChBmB,GAAgBlB,KAGpBK,GAAa,GACbF,EAAkBc,SAErB,CAAC/H,EAAKoH,EAAcP,EAAQC,EAAQ1C,IAEjC6D,EAAmBvE,EAAYU,EAAOS,QAQ5C,OAPAhB,qBAAU,WAEJO,EAAOS,SAAWoD,GACpBT,MAED,CAACpD,EAAOS,OAAQoD,EAAkBT,IAE9B,CAACR,EAAgBE,GCkBpBgB,CAAqB9D,EAAQyC,EAAQC,GApBX,mBAiBvBE,EAjBuB,KAiBPmB,EAjBO,KAsBxBjB,EAAYH,GAAsBoB,EAExC,IAAKpI,EAAQ,OAAO,6BAEpB,IAkCMqI,EACoB,KAAxBhC,EAAaiC,QAAiBnC,EAAkBrB,OAAS,EAuB3D,OACE,eAAC7C,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,SAAS5B,UAAWoB,EAAQhB,KAA9D,UACE,gCACE,8CACA,uDACuB,IACrB,cAAC4H,EAAA,EAAD,CACEC,MAAM,gBACNjF,QAAQ,SACRX,MAAOyD,EACPxD,SAAU,SAAC4F,GAAD,OAAgBnC,EAAgBmC,EAAMC,OAAO9F,UAEzD,cAACU,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,QArCa,WACjB4E,GAGJpI,EACG0I,eAAezI,EAAQ,CACtB0I,KAAMvC,EACNwC,QAAQ,EACRC,YAAY,GAAD,OAAKhC,EAAL,eAAkBC,EAAlB,yCAEZ7B,MAAK,SAACC,GACL,IAEM4D,EA9Fd,SAAoBC,EAAc1G,GAEhC,IADA,IAAI2G,EAAS,GACJzD,EAAI,EAAGA,EAAIwD,EAAMlE,OAAQU,GAAKlD,EAAM,CAC3C,IAAI4G,EAAQF,EAAMG,MAAM3D,EAAGA,EAAIlD,GAC/B2G,EAAOG,KAAKF,GAEd,OAAOD,EAwFmBI,CAFMlD,EAAkBZ,KAAI,SAAC+D,GAAD,OAAUA,EAAKC,OAEb,KAClDC,QAAQC,IACNV,EAAYxD,KAAI,SAACmE,GAAD,OAAUzJ,EAAI0J,oBAAoBxE,EAAKoC,GAAImC,OAC3DxE,MAAK,WACLqB,EAAQ6C,KAAR,6BAAmCjE,EAAKoC,YAqBtChH,UAAWoB,EAAQb,OACnB8I,SAAUvB,EALZ,mCAWJ,cAACjG,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAO9B,UAAWoB,EAAQR,MAAOmB,KAAM,SAAvC,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAW7B,QAAQ,WAAnB,SACE,cAACiJ,EAAA,EAAD,CACEhH,SAnEe,WAC7B,GAAiC,IAA7BsD,EAAkBrB,OAAc,CAClC,IAAMqB,EAAoBc,EAAe1B,KACvC,kBAA+C,CAC7CgC,GADF,EAAGA,GAEDgC,IAFF,EAAOA,QAKTnD,EAAqBD,QAErBC,EAAqB,KA0DT0D,cACE3D,EAAkBrB,OAAS,GAC3BqB,EAAkBrB,OAASmC,EAAenC,OAE5CiF,QAAS5D,EAAkBrB,OAAS,MAGxC,cAACrC,EAAA,EAAD,yBACA,cAACA,EAAA,EAAD,wBACA,cAACA,EAAA,EAAD,yBAGJ,cAACC,EAAA,EAAD,UACGuE,EAAe1B,KAAI,SAACE,GACnB,IAAMuE,EAAa7D,EAChBZ,KAAI,SAAC+D,GAAD,OAA0BA,EAAK/B,MACnC0C,SAASxE,EAAM8B,IAClB,OACE,eAAC/E,EAAA,EAAD,CACE0H,OAAK,EACLC,KAAK,WAEL1G,QAAS,kBA9GL,SAAC8D,EAAYgC,GAC/B,IAAMa,EAAgBjE,EAAkBZ,KAAI,SAAC+D,GAAD,OAAUA,EAAK/B,MAAI8C,QAAQ9C,GACnE+C,EAA2B,IAER,IAAnBF,EACFE,EAAcA,EAAY5E,OAAOS,EAAmB,CAAEoB,KAAIgC,QAC/B,IAAlBa,EACTE,EAAcA,EAAY5E,OAAOS,EAAkBgD,MAAM,IAChDiB,IAAkBjE,EAAkBrB,OAAS,EACtDwF,EAAcA,EAAY5E,OAAOS,EAAkBgD,MAAM,GAAI,IACpDiB,EAAgB,IACzBE,EAAcnE,EAAkBT,OAC9BS,EAAkBgD,MAAM,EAAGiB,GAC3BjE,EAAkBgD,MAAMiB,EAAgB,KAI5ChE,EAAqBkE,GA6FQC,CAAY9E,EAAM8B,GAAI9B,EAAM8D,MAJ7C,UAME,cAAC9G,EAAA,EAAD,CAAW7B,QAAQ,WAAnB,SACE,cAACiJ,EAAA,EAAD,CAAUE,QAASC,MAErB,cAACvH,EAAA,EAAD,UAAYgD,EAAMmD,OAClB,cAACnG,EAAA,EAAD,UACGgD,EAAM+E,QAAQjF,KAAI,SAACkF,GAAD,OAAYA,EAAE7B,QAAM8B,KAAK,QAE9C,cAACjI,EAAA,EAAD,UAAYgD,EAAMkF,MAAM/B,SAVnBnD,EAAM8B,cAiBtBJ,GAAa,cAACyD,EAAA,EAAD,IACd,cAACtH,EAAA,EAAD,CAAQG,QAASsB,EAAU6E,UAAW/D,GAAWsB,EAAjD,0BEvMN,IAAM1G,EAAYC,YAAW,CAC3BC,KAAM,CACJC,QAAS,IAEXC,QAAS,CACPD,QAAS,IAEXE,OAAQ,CACNC,WAAY,GACZC,YAAa,IAEfC,KAAM,CACJC,eAAgB,QAElBC,MAAO,CACLC,SAAU,IACVC,aAAc,MAkBlB,IAAMC,EAAgB,aACP,SAASuJ,IAAW,IAAD,EACxB7K,EAAWK,qBAAWC,GAAtBN,OAEF8K,EAlBR,SAA4BvD,GAAa,IAC/BtH,EAAQI,qBAAWC,GAAnBL,IAD8B,EAEEuB,mBAA8B,MAFhC,mBAE/BsJ,EAF+B,KAEjBC,EAFiB,KAWtC,OAPAjH,qBAAU,WAER7D,EAAI+K,YAAYzD,GAAIrC,MAAK,YAA8C,IAA3C+F,EAA0C,EAA1CA,cAAeC,EAA2B,EAA3BA,OACzCH,EAAgB,CAAEE,gBAAeC,gBAElC,CAACjL,EAAKsH,IAEFuD,EAOcK,CADcC,cAA3BC,YAGF1J,EAAUlB,IAEhB,OAAKT,EAKH,gCACE,oDACoB,IAClB,mBAAGsL,KAAI,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAAcG,cAAcM,QAArC,0BACGT,QADH,IACGA,OADH,EACGA,EAAcG,cAAcM,eAD/B,QAC0C,0BAG5C,cAACjI,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,QAASnC,EACTf,UAAWoB,EAAQb,OAJrB,SAME,cAAC,IAAD,CACEN,GAAI,mBACJkD,MAAO,CAAExC,eAAgB,OAAQsC,MAAO,SAF1C,+BAjBG,6B,YC5CLgI,EAAS,CACb,wBACA,0BACA,qBAgBa,SAASC,EAAmBC,GAOzC,OANmBrL,qBAAWC,GAAtBN,SAGN2G,OAAOC,SAAS0E,KAdlBK,UAAU,GAAD,OAfc,yCAed,sBAdO,mCAcP,6CAlBY,yCAkBZ,kBAC8FH,EAAOd,KAC1G,KAFK,yBAZGkB,KA6BL,cAAC,IAAD,eAAWF,I,YC7BdzL,EAAM,I,OAAI4L,GAED,SAASC,EAAT,GAAgD,IAArBC,EAAoB,EAApBA,SAAoB,EAChCvK,mBAAwB,MADQ,mBACrDtB,EADqD,KAC7C8L,EAD6C,KAEtDC,EAAa,IAAIvF,gBACrBC,OAAOC,SAASsF,KAAKC,OAAO,IAGxBC,EAAsBH,EAAWpF,IAAI,gBACrCwF,EAAoBJ,EAAWpF,IAAI,cAPmB,EAStBrF,mBACpC4K,GAV0D,mBASrDE,EATqD,KASxCC,EATwC,OAY1B/K,mBACX,MAArB6K,GAA6BA,EAAoB,MAbS,mBAYrDtM,EAZqD,KAY1CyM,EAZ0C,KAgBtDC,EAAU5K,uBAAY,SAAC6K,GAC3BzM,EAAIsM,eAAeG,GACnBzM,EAAI0M,QAAQzH,MAAK,SAACC,GAChB6G,EAAU7G,EAAKoC,SAEhB,IAGGqF,EAA0BjJ,EAC9ByI,GAEIS,EAAwBlJ,EAA2B0I,GACzDvI,qBAAU,WAEiB,MAAvBsI,GACAQ,IAA4BR,IAE5BG,EAAeH,GACfK,EAAQL,IAGa,MAArBC,GACAQ,IAA0BR,GAE1BG,GAAa,IAAIM,MAAOC,YAAaV,KAEtC,CACDO,EACAR,EACAS,EACAR,EACAI,IAGF,IAAMO,EAAgBC,mBACpB,iBAAO,CAELlN,YACAC,OAAuB,MAAfsM,EACRrM,MACAC,YAEF,CAACoM,EAAavM,EAAWG,IAG3B,OACE,cAACI,EAAe4M,SAAhB,CAAyBtK,MAAOoK,EAAhC,SACGjB,IC3CQoB,MAvBf,WACE,OACE,cAAC,IAAD,UACE,cAACrB,EAAD,UACE,eAAC,IAAD,WACE,cAACL,EAAD,CAAoB2B,KAAK,iCAAzB,SACE,cAACvC,EAAD,MAEF,cAACY,EAAD,CAAoB2B,KAAK,mBAAzB,SACE,cAAClH,EAAD,MAEF,cAACuF,EAAD,CAAoB2B,KAAK,mBAAzB,SACE,cAAC7L,EAAD,MAEF,cAAC,IAAD,CAAO6L,KAAK,cAAZ,SACE,cAAC,EAAD,cCdGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrI,MAAK,YAAkD,IAA/CsI,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,EAAQ,IAAUC,SAElBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.57c127b3.chunk.js","sourcesContent":["import * as React from \"react\";\n\ninterface SpotifyContext {\n  expiresAt: number | null; // epoch time this expires at\n  isAuth: boolean;\n  api: any; // TODO figure out how tf to do this with typescript\n  userID: string | null;\n}\n\nconst _default: SpotifyContext = {\n  expiresAt: null,\n  isAuth: false,\n  api: null,\n  userID: null,\n};\n\nexport default React.createContext(_default);\n","import * as React from \"react\";\nimport \"./Splash.css\";\nimport SpotifyContext from \"./SpotifyContext\";\n\nimport { Link } from \"react-router-dom\";\nimport { useContext } from \"react\";\n\nexport default function Splash() {\n  const { isAuth } = useContext(SpotifyContext);\n\n  return (\n    <div>\n      <header className=\"Splash-header\">\n        <Link to=\"/spotibike/setup\">{isAuth ? \"Continue\" : \"Login\"}</Link>\n      </header>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { useCallback, useContext, useState } from \"react\";\n\nimport SpotifyContext from \"./SpotifyContext\";\n\nimport {\n  Button,\n  Box,\n  Slider,\n  makeStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\nconst MIN_BPM = 50;\nconst MAX_BPM = 220;\n\nconst useStyles = makeStyles({\n  root: {\n    padding: 32,\n  },\n  buttons: {\n    padding: 64,\n  },\n  button: {\n    marginLeft: 12,\n    marginRight: 12,\n  },\n  link: {\n    textDecoration: \"none\",\n  },\n  table: {\n    maxWidth: 500,\n    marginBottom: 40,\n  },\n});\n\nconst emptyFunction = () => {};\nexport default function Setup() {\n  const [bpmRange, setBpmRange] = useState([60, 120]);\n\n  const { isAuth } = useContext(SpotifyContext);\n\n  const handleChange = (_: any, newBpm: any /* TODO: stricter typing */) => {\n    setBpmRange(newBpm);\n  };\n\n  const classes = useStyles();\n  const getSongsURI = useCallback(\n    (useUserArtists: boolean) => {\n      return {\n        pathname: \"/spotibike/songs\",\n        search: `?use_user_artists=${useUserArtists}&min_bpm=${bpmRange[0]}&max_bpm=${bpmRange[1]}`,\n      };\n    },\n    [bpmRange]\n  );\n\n  if (!isAuth) return <></>;\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" className={classes.root}>\n      <TableContainer>\n        <Table size=\"medium\" className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell>Biking Type</TableCell>\n              <TableCell>Recommended BPM Range</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow>\n              <TableCell>Recovery</TableCell>\n              <TableCell>~100-110 BPM</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Intervals</TableCell>\n              <TableCell>~160+ BPM</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Tempo</TableCell>\n              <TableCell>~140-150 BPM</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Endurance</TableCell>\n              <TableCell>~120-130 BPM</TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <div>\n        Selected BPM: {bpmRange[0]} - {bpmRange[1]}\n      </div>\n      <Slider\n        value={bpmRange}\n        onChange={handleChange}\n        valueLabelDisplay=\"on\"\n        aria-labelledby=\"range-slider\"\n        step={1}\n        min={MIN_BPM}\n        max={MAX_BPM}\n      />\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        className={classes.buttons}\n        justifyContent=\"space-around\"\n      >\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={emptyFunction}\n          className={classes.button}\n        >\n          {/* TODO proper styling */}\n          <Link\n            to={getSongsURI(true)}\n            style={{ textDecoration: \"none\", color: \"white\" }}\n          >\n            Make Playlist from Your Liked Songs\n          </Link>\n        </Button>\n        <Button\n          variant=\"contained\"\n          onClick={emptyFunction}\n          className={classes.button}\n        >\n          <Link\n            to={getSongsURI(false)}\n            style={{ textDecoration: \"none\", color: \"black\" }}\n          >\n            Make Playlist from Random Top Music\n          </Link>\n        </Button>\n      </Box>\n    </Box>\n  );\n}\n","import { useCallback, useContext, useState } from \"react\";\n\nimport SpotifyContext from \"./../SpotifyContext\";\n\nconst GLOBAL_TOP_50_URI = \"37i9dQZEVXbMDoHDwVN2tF\";\n\nconst emptyFunction = () => {};\nexport default function useTopSongs(): [any, () => void, boolean, boolean] {\n  const [tracks, setTracks] = useState([]);\n\n  const { api } = useContext(SpotifyContext);\n\n  const loadMore = useCallback(() => {\n    api.getPlaylistTracks(GLOBAL_TOP_50_URI).then((data: any) => {\n      const tracks = data.items.map(({ track }: { track: any }) => track);\n      setTracks(tracks);\n    });\n  }, [api]);\n  //   const loadMoreRef = useRef(loadMore);\n\n  //   useEffect(() => {\n  //     if (tracks.length === 0) {\n  //       loadMoreRef.current();\n  //     }\n  //   }, [tracks]);\n\n  return [tracks, emptyFunction, false, false];\n}\n","import { useEffect, useRef } from \"react\";\n\nexport default function usePrevious<T>(value: T) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef<T>();\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport SpotifyContext from \"./../SpotifyContext\";\n\nimport usePrevious from \"./usePrevious\";\n\n// map track ID to tempo\nconst tempoMap = new Map<string, null | number>();\n\ntype TrackInfo = {\n  id: string;\n  uri: string;\n};\nexport default function useFilterTracksByBPM(\n  tracks: any,\n  minBpm: number,\n  maxBpm: number\n): [TrackInfo[], boolean] {\n  const [filteredTracks, setFilteredTracks] = useState([]);\n  const { api } = useContext(SpotifyContext);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  // Tracks is going to grow by 50 every time it changes. The audio features\n  // endpoints only accepts 50 (maybe 100) ids at a time. If we keep track of\n  // ones we've already queried info for, and only query tempo for new tracks,\n  // we'll never hit the limit. Hopefully. ಠ⌣ಠ\n  const unfetchedIDs = tracks\n    .filter(({ id }: { id: string }) => !tempoMap.has(id))\n    .map(({ id }: { id: string }) => id);\n  const fetchTempoAndRecalculate = useCallback(() => {\n    if (unfetchedIDs.length === 0) {\n      return;\n    }\n    setIsLoading(true);\n    api\n      .getAudioFeaturesForTracks(unfetchedIDs)\n      .then(({ audio_features: features }: { audio_features: any }) => {\n        features.forEach((feature: null | any) => {\n          if (feature == null) {\n            return;\n          }\n          tempoMap.set(feature.id, feature.tempo);\n        });\n        const updatedTracks = tracks.filter((track: any) => {\n          const fetchedTempo = tempoMap.get(track.id);\n          return (\n            fetchedTempo != null &&\n            fetchedTempo >= minBpm &&\n            fetchedTempo <= maxBpm\n          );\n        });\n        setIsLoading(false);\n        setFilteredTracks(updatedTracks);\n      });\n  }, [api, unfetchedIDs, minBpm, maxBpm, tracks]);\n\n  const prevTracksLength = usePrevious(tracks.length);\n  useEffect(() => {\n    // filter whenever tracks length changes\n    if (tracks.length !== prevTracksLength) {\n      fetchTempoAndRecalculate();\n    }\n  }, [tracks.length, prevTracksLength, fetchTempoAndRecalculate]);\n\n  return [filteredTracks, isLoading];\n}\n","import * as React from \"react\";\nimport { useContext, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport useUserSongs from \"./hooks/useUserSongs\";\nimport useTopSongs from \"./hooks/useTopSongs\";\nimport useFilterTracksByBPM from \"./hooks/useFilterTracksByBPM\";\n\nimport SpotifyContext from \"./SpotifyContext\";\n\nimport {\n  Box,\n  Button,\n  Checkbox,\n  CircularProgress,\n  makeStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    padding: 32,\n  },\n  table: {\n    minWidth: 750,\n  },\n  button: {\n    marginLeft: 12,\n    marginRight: 12,\n  },\n});\n\ntype TrackInfo = {\n  id: string;\n  uri: string;\n};\n\n// https://scotch.io/courses/the-ultimate-guide-to-javascript-algorithms/array-chunking\nfunction chunkArray(array: any[], size: number) {\n  let result = [];\n  for (let i = 0; i < array.length; i += size) {\n    let chunk = array.slice(i, i + size);\n    result.push(chunk);\n  }\n  return result;\n}\n\nfunction useSongs(\n  useUserArtists: boolean\n): [any, () => void, boolean, boolean] {\n  // TODO: Figure out how to only issue query for one of these\n  const userSongs = useUserSongs();\n  const topSongs = useTopSongs();\n\n  return useUserArtists ? userSongs : topSongs;\n}\n\nexport default function Songs() {\n  const [selectedTrackInfo, setSelectedTrackInfo] = useState<TrackInfo[]>([]);\n  const [playlistName, setPlaylistName] = useState<string>(\"\");\n  const { isAuth, api, userID } = useContext(SpotifyContext);\n  const classes = useStyles();\n  const history = useHistory();\n\n  const params = new URLSearchParams(window.location.search);\n\n  const useUserArtists = params.get(\"use_user_artists\") === \"true\";\n  const minBpm = +(params.get(\"min_bpm\") ?? \"0\");\n  const maxBpm = +(params.get(\"max_bpm\") ?? \"0\");\n\n  const [tracks, loadMore, hasMore, isLoadingMoreSongs] = useSongs(\n    useUserArtists\n  );\n\n  const [filteredTracks, isLoadingFilterData]: [\n    TrackInfo[],\n    boolean\n  ] = useFilterTracksByBPM(tracks, minBpm, maxBpm);\n\n  const isLoading = isLoadingMoreSongs || isLoadingFilterData;\n\n  if (!isAuth) return <></>;\n\n  const handleClick = (id: string, uri: string) => {\n    const selectedIndex = selectedTrackInfo.map((info) => info.id).indexOf(id);\n    let newSelected: TrackInfo[] = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selectedTrackInfo, { id, uri });\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selectedTrackInfo.slice(1));\n    } else if (selectedIndex === selectedTrackInfo.length - 1) {\n      newSelected = newSelected.concat(selectedTrackInfo.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = selectedTrackInfo.concat(\n        selectedTrackInfo.slice(0, selectedIndex),\n        selectedTrackInfo.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelectedTrackInfo(newSelected);\n  };\n\n  const handleSelectAllClicked = () => {\n    if (selectedTrackInfo.length === 0) {\n      const selectedTrackInfo = filteredTracks.map(\n        ({ id, uri }: { id: string; uri: string }) => ({\n          id,\n          uri,\n        })\n      );\n      setSelectedTrackInfo(selectedTrackInfo);\n    } else {\n      setSelectedTrackInfo([]);\n    }\n  };\n\n  const isCreateButtonDisabled =\n    playlistName.trim() === \"\" || selectedTrackInfo.length < 1;\n  const createPlaylist = () => {\n    if (isCreateButtonDisabled) {\n      return;\n    }\n    api\n      .createPlaylist(userID, {\n        name: playlistName,\n        public: false, // make playlist private by default\n        description: `${minBpm} to ${maxBpm} BPM playlist - Made with Spotibike`,\n      })\n      .then((data: { id: string }) => {\n        const selectedTrackURIs = selectedTrackInfo.map((info) => info.uri);\n        // Ensure that we only add up to 100 songs at a time\n        const chunkedURIs = chunkArray(selectedTrackURIs, 100);\n        Promise.all(\n          chunkedURIs.map((uris) => api.addTracksToPlaylist(data.id, uris))\n        ).then(() => {\n          history.push(`/spotibike/success/${data.id}`);\n        });\n      });\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" className={classes.root}>\n      <div>\n        <div>Song Select</div>\n        <div>\n          Enter Playlist Name:{\" \"}\n          <TextField\n            label=\"Playlist Name\"\n            variant=\"filled\"\n            value={playlistName}\n            onChange={(event: any) => setPlaylistName(event.target.value)}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={createPlaylist}\n            className={classes.button}\n            disabled={isCreateButtonDisabled}\n          >\n            Create Playlist\n          </Button>\n        </div>\n      </div>\n      <TableContainer>\n        <Table className={classes.table} size={\"medium\"}>\n          <TableHead>\n            <TableRow>\n              <TableCell padding=\"checkbox\">\n                <Checkbox\n                  onChange={handleSelectAllClicked}\n                  indeterminate={\n                    selectedTrackInfo.length > 0 &&\n                    selectedTrackInfo.length < filteredTracks.length\n                  }\n                  checked={selectedTrackInfo.length > 0}\n                />\n              </TableCell>\n              <TableCell>Track Name</TableCell>\n              <TableCell>Artist(s)</TableCell>\n              <TableCell>Album</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredTracks.map((track: any) => {\n              const isSelected = selectedTrackInfo\n                .map((info: { id: string }) => info.id)\n                .includes(track.id);\n              return (\n                <TableRow\n                  hover\n                  role=\"checkbox\"\n                  key={track.id}\n                  onClick={() => handleClick(track.id, track.uri)}\n                >\n                  <TableCell padding=\"checkbox\">\n                    <Checkbox checked={isSelected} />\n                  </TableCell>\n                  <TableCell>{track.name}</TableCell>\n                  <TableCell>\n                    {track.artists.map((a: any) => a.name).join(\", \")}\n                  </TableCell>\n                  <TableCell>{track.album.name}</TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {isLoading && <CircularProgress />}\n      <Button onClick={loadMore} disabled={!hasMore || isLoading}>\n        Load More\n      </Button>\n    </Box>\n  );\n}\n","import { useCallback, useContext, useEffect, useRef, useState } from \"react\";\n\nimport SpotifyContext from \"./../SpotifyContext\";\n\nexport default function useUserSongs(): [any, () => void, boolean, boolean] {\n  const [tracks, setTracks] = useState([]);\n\n  const [isLoadingMore, setIsLoadingMore] = useState<boolean>(false);\n  const [trackCount, setTrackCount] = useState<number>(0);\n  const [madeFirstRequest, setMadeFirstRequest] = useState<boolean>(false);\n\n  const { api } = useContext(SpotifyContext);\n\n  const offset = tracks.length;\n  const loadMore = useCallback(() => {\n    setMadeFirstRequest(true);\n    setIsLoadingMore(true);\n    api\n      .getMySavedTracks({ limit: 50, offset })\n      .then((data: any) => {\n        setTrackCount(data.total);\n        const newTracks = data.items.map(\n          (i: { added_at: string; track: any }) => i.track\n        );\n        setTracks(tracks.concat(newTracks));\n      })\n      .finally(() => {\n        setIsLoadingMore(false);\n      });\n  }, [api, tracks, offset]);\n  const loadMoreRef = useRef(loadMore);\n\n  useEffect(() => {\n    if (tracks.length === 0) {\n      loadMoreRef.current();\n    }\n  }, [tracks]);\n\n  const hasMore = !madeFirstRequest || tracks.length < trackCount;\n  return [tracks, loadMore, hasMore, isLoadingMore];\n}\n","import * as React from \"react\";\nimport SpotifyContext from \"./SpotifyContext\";\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\ntype PlaylistData = {\n  external_urls: {\n    spotify: string;\n  };\n  images: string[];\n};\n\nconst useStyles = makeStyles({\n  root: {\n    padding: 32,\n  },\n  buttons: {\n    padding: 64,\n  },\n  button: {\n    marginLeft: 12,\n    marginRight: 12,\n  },\n  link: {\n    textDecoration: \"none\",\n  },\n  table: {\n    maxWidth: 500,\n    marginBottom: 40,\n  },\n});\n\nfunction usePlaylistDetails(id: string) {\n  const { api } = useContext(SpotifyContext);\n  const [playlistData, setPlaylistData] = useState<null | PlaylistData>(null);\n\n  useEffect(() => {\n    // refetch when either API or ID change\n    api.getPlaylist(id).then(({ external_urls, images }: PlaylistData) => {\n      setPlaylistData({ external_urls, images });\n    });\n  }, [api, id]);\n\n  return playlistData;\n}\n\nconst emptyFunction = () => {};\nexport default function Success() {\n  const { isAuth } = useContext(SpotifyContext);\n  const { playlistid: playlistID } = useParams<{ playlistid: string }>();\n  const playlistData = usePlaylistDetails(playlistID);\n\n  const classes = useStyles();\n\n  if (!isAuth) {\n    return <></>;\n  }\n\n  return (\n    <div>\n      <div>\n        Playlist Created:{\" \"}\n        <a href={playlistData?.external_urls.spotify}>\n          {playlistData?.external_urls.spotify ?? \"Loading Details...\"}\n        </a>\n      </div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={emptyFunction}\n        className={classes.button}\n      >\n        <Link\n          to={\"/spotibike/setup\"}\n          style={{ textDecoration: \"none\", color: \"white\" }}\n        >\n          Make Another\n        </Link>\n      </Button>\n    </div>\n  );\n}\n","import * as React from \"react\";\n\nimport { Route } from \"react-router-dom\";\nimport SpotifyContext from \"./SpotifyContext\";\nimport { useContext } from \"react\";\n\nconst HOSTED_APP_URI = \"https://rageandqq.github.io/spotibike/\";\nconst HOSTED_APP_DEV_URI = \"http://localhost:3000/spotibike/\";\n\nconst SPOTIFY_AUTH_URI = \"https://accounts.spotify.com/authorize\";\nconst CLIENT_ID = \"6fd3ee11d3a146ffad18854c9762964c\";\n\nconst isDev = process.env.NODE_ENV === \"development\";\nconst REDIRECT_URI = isDev ? HOSTED_APP_DEV_URI : HOSTED_APP_URI;\n\nconst SCOPES = [\n  \"playlist-read-private\",\n  \"playlist-modify-private\",\n  \"user-library-read\",\n];\n\nconst ALWAYS_AUTHENTICATE = isDev;\n\nconst getRedirectURI = () =>\n  encodeURI(\n    `${SPOTIFY_AUTH_URI}?client_id=${CLIENT_ID}&response_type=token&redirect_uri=${REDIRECT_URI}&scope=${SCOPES.join(\n      \" \"\n    )}&show_dialog=${ALWAYS_AUTHENTICATE}`\n  );\n\ninterface IProps {\n  children: React.ReactNode;\n  path: string;\n}\nexport default function AuthenticatedRoute(props: IProps) {\n  const { isAuth } = useContext(SpotifyContext);\n\n  if (!isAuth) {\n    window.location.href = getRedirectURI();\n  }\n\n  return <Route {...props} />;\n}\n","import * as React from \"react\";\nimport SpotifyContext from \"./SpotifyContext\";\n\nimport { useState, useMemo, useEffect, useCallback } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\n\nimport usePrevious from \"./hooks/usePrevious\";\n\ntype IProps = {\n  children: React.ReactNode;\n};\n\nconst api = new SpotifyWebApi();\n\nexport default function SpotifyProvider({ children }: IProps) {\n  const [userID, setUserID] = useState<null | string>(null);\n  const hashParams = new URLSearchParams(\n    window.location.hash.substr(1) // skip the first char (#)\n  );\n\n  const accessTokenFromAuth = hashParams.get(\"access_token\");\n  const expiresInFromAuth = hashParams.get(\"exipres_in\");\n\n  const [accessToken, setAccessToken] = useState<string | null>(\n    accessTokenFromAuth\n  );\n  const [expiresAt, setExpiresAt] = useState<number | null>(\n    expiresInFromAuth != null ? +expiresInFromAuth : null // not a typo, use \"+\" to convert to number\n  );\n\n  const initAPI = useCallback((token) => {\n    api.setAccessToken(token);\n    api.getMe().then((data) => {\n      setUserID(data.id);\n    });\n  }, []);\n\n  // This is probbaly unnecessary... but if it changes, we should do something\n  const prevAccessTokenFromAuth = usePrevious<string | null>(\n    accessTokenFromAuth\n  );\n  const prevExpiresInFromAuth = usePrevious<string | null>(expiresInFromAuth);\n  useEffect(() => {\n    if (\n      accessTokenFromAuth != null &&\n      prevAccessTokenFromAuth !== accessTokenFromAuth\n    ) {\n      setAccessToken(accessTokenFromAuth);\n      initAPI(accessTokenFromAuth);\n    }\n    if (\n      expiresInFromAuth != null &&\n      prevExpiresInFromAuth !== expiresInFromAuth\n    ) {\n      setExpiresAt(new Date().getTime() + +expiresInFromAuth); // not a typo, use \"+\" to convert to number\n    }\n  }, [\n    prevAccessTokenFromAuth,\n    accessTokenFromAuth,\n    prevExpiresInFromAuth,\n    expiresInFromAuth,\n    initAPI,\n  ]);\n\n  const providerValue = useMemo(\n    () => ({\n      // accessToken,\n      expiresAt,\n      isAuth: accessToken != null, // TODO: figure out how to use expiresAt\n      api,\n      userID,\n    }),\n    [accessToken, expiresAt, userID]\n  );\n\n  return (\n    <SpotifyContext.Provider value={providerValue}>\n      {children}\n    </SpotifyContext.Provider>\n  );\n}\n","import Splash from \"./SplashScreen\";\nimport Setup from \"./Setup\";\nimport Songs from \"./Songs\";\nimport Success from \"./Success\";\nimport AuthenticatedRoute from \"./AuthenticatedRoute\";\n\nimport * as React from \"react\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SpotifyProvider from \"./SpotifyProvider\";\n\nfunction App() {\n  return (\n    <Router>\n      <SpotifyProvider>\n        <Switch>\n          <AuthenticatedRoute path=\"/spotibike/success/:playlistid\">\n            <Success />\n          </AuthenticatedRoute>\n          <AuthenticatedRoute path=\"/spotibike/songs\">\n            <Songs />\n          </AuthenticatedRoute>\n          <AuthenticatedRoute path=\"/spotibike/setup\">\n            <Setup />\n          </AuthenticatedRoute>\n          <Route path=\"/spotibike/\">\n            <Splash />\n          </Route>\n        </Switch>\n      </SpotifyProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nrequire(\"dotenv\").config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
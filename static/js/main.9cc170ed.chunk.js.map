{"version":3,"sources":["SpotifyContext.tsx","SplashScreen.tsx","Setup.tsx","Songs.tsx","hooks/useUserSongs.tsx","hooks/useTopSongs.tsx","hooks/useFilterTracksByBPM.tsx","Success.tsx","AuthenticatedRoute.tsx","SpotifyProvider.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["_default","expiresAt","isAuth","api","userID","React","Splash","useContext","SpotifyContext","className","to","useStyles","makeStyles","root","padding","buttons","button","marginLeft","marginRight","link","textDecoration","table","maxWidth","marginBottom","emptyFunction","Setup","useState","bpmRange","setBpmRange","classes","getSongsURI","useCallback","useUserArtists","pathname","search","Box","display","flexDirection","TableContainer","Table","size","TableHead","TableRow","TableCell","TableBody","Slider","value","onChange","_","newBpm","valueLabelDisplay","aria-labelledby","step","min","max","justifyContent","Button","variant","color","onClick","style","minWidth","Songs","selectedTrackInfo","setSelectedTrackInfo","playlistName","setPlaylistName","history","useHistory","params","URLSearchParams","window","location","get","minBpm","maxBpm","tracks","setTracks","tracksRef","useRef","loadMore","getMySavedTracks","limit","offset","current","length","then","data","items","map","i","track","loadMoreRef","useEffect","useUserSongs","userTracks","getPlaylistTracks","useTopSongs","topTracks","filteredTracks","setFilteredTracks","filterTracks","ids","id","getAudioFeaturesForTracks","filteredIds","audio_features","filter","feature","tempo","t","includes","useFilterTracksByBPM","isCreateButtonDisabled","trim","TextField","label","event","target","createPlaylist","name","public","description","selectedTrackURIs","info","uri","addTracksToPlaylist","push","disabled","Checkbox","indeterminate","checked","isSelected","hover","role","selectedIndex","indexOf","newSelected","concat","slice","handleClick","artists","a","join","album","Success","playlistData","setPlaylistData","getPlaylist","external_urls","images","usePlaylistDetails","useParams","playlistid","href","spotify","SCOPES","AuthenticatedRoute","props","encodeURI","process","usePrevious","ref","SpotifyWebApi","SpotifyProvider","children","setUserID","hashParams","hash","substr","accessTokenFromAuth","expiresInFromAuth","accessToken","setAccessToken","setExpiresAt","initAPI","token","getMe","prevAccessTokenFromAuth","prevExpiresInFromAuth","Date","getTime","providerValue","useMemo","Provider","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","require","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9cc170ed.chunk.js","sourcesContent":["import * as React from \"react\";\n\ninterface SpotifyContext {\n  expiresAt: number | null; // epoch time this expires at\n  isAuth: boolean;\n  api: any; // TODO figure out how tf to do this with typescript\n  userID: string | null;\n}\n\nconst _default: SpotifyContext = {\n  expiresAt: null,\n  isAuth: false,\n  api: null,\n  userID: null,\n};\n\nexport default React.createContext(_default);\n","import * as React from \"react\";\nimport \"./Splash.css\";\nimport SpotifyContext from \"./SpotifyContext\";\n\nimport { Link } from \"react-router-dom\";\nimport { useContext } from \"react\";\n\nexport default function Splash() {\n  const { isAuth } = useContext(SpotifyContext);\n\n  return (\n    <div>\n      <header className=\"Splash-header\">\n        <Link to=\"/spotibike/setup\">{isAuth ? \"Continue\" : \"Login\"}</Link>\n      </header>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { useCallback, useContext, useState } from \"react\";\n\nimport SpotifyContext from \"./SpotifyContext\";\n\nimport {\n  Button,\n  Box,\n  Slider,\n  makeStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\nconst MIN_BPM = 50;\nconst MAX_BPM = 220;\n\nconst useStyles = makeStyles({\n  root: {\n    padding: 32,\n  },\n  buttons: {\n    padding: 64,\n  },\n  button: {\n    marginLeft: 12,\n    marginRight: 12,\n  },\n  link: {\n    textDecoration: \"none\",\n  },\n  table: {\n    maxWidth: 500,\n    marginBottom: 40,\n  },\n});\n\nconst emptyFunction = () => {};\nexport default function Setup() {\n  const [bpmRange, setBpmRange] = useState([60, 120]);\n\n  const { isAuth } = useContext(SpotifyContext);\n\n  const handleChange = (_: any, newBpm: any /* TODO: stricter typing */) => {\n    setBpmRange(newBpm);\n  };\n\n  const classes = useStyles();\n  const getSongsURI = useCallback(\n    (useUserArtists: boolean) => {\n      return {\n        pathname: \"/spotibike/songs\",\n        search: `?use_user_artists=${useUserArtists}&min_bpm=${bpmRange[0]}&max_bpm=${bpmRange[1]}`,\n      };\n    },\n    [bpmRange]\n  );\n\n  if (!isAuth) return <></>;\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" className={classes.root}>\n      <TableContainer>\n        <Table size=\"medium\" className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell>Biking Type</TableCell>\n              <TableCell>Recommended BPM Range</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow>\n              <TableCell>Recovery</TableCell>\n              <TableCell>~100-110 BPM</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Intervals</TableCell>\n              <TableCell>~160+ BPM</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Tempo</TableCell>\n              <TableCell>~140-150 BPM</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Endurance</TableCell>\n              <TableCell>~120-130 BPM</TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <div>\n        Selected BPM: {bpmRange[0]} - {bpmRange[1]}\n      </div>\n      <Slider\n        value={bpmRange}\n        onChange={handleChange}\n        valueLabelDisplay=\"on\"\n        aria-labelledby=\"range-slider\"\n        step={1}\n        min={MIN_BPM}\n        max={MAX_BPM}\n      />\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        className={classes.buttons}\n        justifyContent=\"space-around\"\n      >\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={emptyFunction}\n          className={classes.button}\n        >\n          {/* TODO proper styling */}\n          <Link\n            to={getSongsURI(true)}\n            style={{ textDecoration: \"none\", color: \"white\" }}\n          >\n            Make Playlist from Your Artists/Albums\n          </Link>\n        </Button>\n        <Button\n          variant=\"contained\"\n          onClick={emptyFunction}\n          className={classes.button}\n        >\n          <Link\n            to={getSongsURI(false)}\n            style={{ textDecoration: \"none\", color: \"black\" }}\n          >\n            Make Playlist from Random Top Music\n          </Link>\n        </Button>\n      </Box>\n    </Box>\n  );\n}\n","import * as React from \"react\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport useUserSongs from \"./hooks/useUserSongs\";\nimport useTopSongs from \"./hooks/useTopSongs\";\nimport useFilterTracksByBPM from \"./hooks/useFilterTracksByBPM\";\n\nimport SpotifyContext from \"./SpotifyContext\";\n\nimport {\n  Box,\n  Button,\n  Checkbox,\n  makeStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    padding: 32,\n  },\n  table: {\n    minWidth: 750,\n  },\n  button: {\n    marginLeft: 12,\n    marginRight: 12,\n  },\n});\n\ntype TrackInfo = {\n  id: string;\n  uri: string;\n};\n\nexport default function Songs() {\n  const [selectedTrackInfo, setSelectedTrackInfo] = useState<TrackInfo[]>([]);\n  const [playlistName, setPlaylistName] = useState<string>(\"\");\n  const { isAuth, api, userID } = useContext(SpotifyContext);\n  const classes = useStyles();\n  const history = useHistory();\n\n  const params = new URLSearchParams(window.location.search);\n\n  const useUserArtists = params.get(\"use_user_artists\") === \"true\";\n  const minBpm = +(params.get(\"min_bpm\") ?? \"0\");\n  const maxBpm = +(params.get(\"max_bpm\") ?? \"0\");\n\n  const [userTracks] = useUserSongs();\n  const [topTracks] = useTopSongs();\n  const tracks = useUserArtists ? userTracks : topTracks;\n\n  const filteredTracks: TrackInfo[] = useFilterTracksByBPM(\n    tracks,\n    minBpm,\n    maxBpm\n  );\n\n  if (!isAuth) return <></>;\n\n  const handleClick = (id: string, uri: string) => {\n    const selectedIndex = selectedTrackInfo.map((info) => info.id).indexOf(id);\n    let newSelected: TrackInfo[] = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selectedTrackInfo, { id, uri });\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selectedTrackInfo.slice(1));\n    } else if (selectedIndex === selectedTrackInfo.length - 1) {\n      newSelected = newSelected.concat(selectedTrackInfo.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = selectedTrackInfo.concat(\n        selectedTrackInfo.slice(0, selectedIndex),\n        selectedTrackInfo.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelectedTrackInfo(newSelected);\n  };\n\n  const handleSelectAllClicked = () => {\n    if (selectedTrackInfo.length === 0) {\n      const selectedTrackInfo = filteredTracks.map(\n        ({ id, uri }: { id: string; uri: string }) => ({\n          id,\n          uri,\n        })\n      );\n      setSelectedTrackInfo(selectedTrackInfo);\n    } else {\n      setSelectedTrackInfo([]);\n    }\n  };\n\n  const isCreateButtonDisabled =\n    playlistName.trim() === \"\" || selectedTrackInfo.length < 1;\n  const createPlaylist = () => {\n    if (isCreateButtonDisabled) {\n      return;\n    }\n    api\n      .createPlaylist(userID, {\n        name: playlistName,\n        public: false, // make playlist private by default\n        description: `${minBpm} to ${maxBpm} BPM playlist - Made with Spotibike`,\n      })\n      .then((data: { id: string }) => {\n        const selectedTrackURIs = selectedTrackInfo.map((info) => info.uri);\n        // TODO: handle > 100 items to add to playlist\n        api.addTracksToPlaylist(data.id, selectedTrackURIs).then(() => {\n          history.push(`/spotibike/success/${data.id}`);\n        });\n      });\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" className={classes.root}>\n      <div>\n        <div>Song Select</div>\n        <div>\n          Enter Playlist Name:{\" \"}\n          <TextField\n            label=\"Playlist Name\"\n            variant=\"filled\"\n            value={playlistName}\n            onChange={(event: any) => setPlaylistName(event.target.value)}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={createPlaylist}\n            className={classes.button}\n            disabled={isCreateButtonDisabled}\n          >\n            Create Playlist\n          </Button>\n        </div>\n      </div>\n      <TableContainer>\n        <Table className={classes.table} size={\"medium\"}>\n          <TableHead>\n            <TableRow>\n              <TableCell padding=\"checkbox\">\n                <Checkbox\n                  onChange={handleSelectAllClicked}\n                  indeterminate={\n                    selectedTrackInfo.length > 0 &&\n                    selectedTrackInfo.length < filteredTracks.length\n                  }\n                  checked={selectedTrackInfo.length > 0}\n                />\n              </TableCell>\n              <TableCell>Track Name</TableCell>\n              <TableCell>Artist(s)</TableCell>\n              <TableCell>Album</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredTracks.map((track: any) => {\n              const isSelected = selectedTrackInfo\n                .map((info: { id: string }) => info.id)\n                .includes(track.id);\n              return (\n                <TableRow\n                  hover\n                  role=\"checkbox\"\n                  key={track.id}\n                  onClick={() => handleClick(track.id, track.uri)}\n                >\n                  <TableCell padding=\"checkbox\">\n                    <Checkbox checked={isSelected} />\n                  </TableCell>\n                  <TableCell>{track.name}</TableCell>\n                  <TableCell>\n                    {track.artists.map((a: any) => a.name).join(\", \")}\n                  </TableCell>\n                  <TableCell>{track.album.name}</TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n}\n","import { useCallback, useContext, useEffect, useRef, useState } from \"react\";\n\nimport SpotifyContext from \"./../SpotifyContext\";\n\nexport default function useUserSongs() {\n  const [tracks, setTracks] = useState([]);\n  const tracksRef = useRef(tracks);\n\n  const { api } = useContext(SpotifyContext);\n\n  // todo: use offset for load more\n  const loadMore = useCallback(() => {\n    api\n      .getMySavedTracks({ limit: 50, offset: tracksRef.current.length ?? 0 })\n      .then((data: any) => {\n        setTracks(\n          data.items.map((i: { added_at: string; track: any }) => i.track)\n        );\n      });\n  }, [api]);\n  const loadMoreRef = useRef(loadMore);\n\n  useEffect(() => {\n    if (tracks.length === 0) {\n      loadMoreRef.current();\n    }\n  }, [tracks]);\n\n  return [tracks, loadMoreRef.current];\n}\n","import { useCallback, useContext, useEffect, useRef, useState } from \"react\";\n\nimport SpotifyContext from \"./../SpotifyContext\";\n\nconst GLOBAL_TOP_50_URI = \"37i9dQZEVXbMDoHDwVN2tF\";\n\nexport default function useTopSongs() {\n  const [tracks, setTracks] = useState([]);\n\n  const { api } = useContext(SpotifyContext);\n\n  // todo: use offset for load more\n  const loadMore = useCallback(() => {\n    api.getPlaylistTracks(GLOBAL_TOP_50_URI).then((data: any) => {\n      const tracks = data.items.map(({ track }: { track: any }) => track);\n      setTracks(tracks);\n    });\n  }, [api]);\n  const loadMoreRef = useRef(loadMore);\n\n  useEffect(() => {\n    if (tracks.length === 0) {\n      loadMoreRef.current();\n    }\n  }, [tracks]);\n\n  return [tracks, loadMoreRef.current];\n}\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport SpotifyContext from \"./../SpotifyContext\";\n\nexport default function useFilterTracksByBPM(\n  tracks: any,\n  minBpm: number,\n  maxBpm: number\n) {\n  const [filteredTracks, setFilteredTracks] = useState([]);\n  const { api } = useContext(SpotifyContext);\n\n  const filterTracks = useCallback(() => {\n    const ids = tracks.map(({ id }: { id: string }) => id);\n    // TODO: handle case of more than limit (50) ids\n    api\n      .getAudioFeaturesForTracks(ids)\n      .then(({ audio_features: features }: { audio_features: any }) => {\n        const filteredIds = features\n          .filter((feature: { tempo: number }) => {\n            if (feature == null) {\n              return false;\n            }\n            const { tempo } = feature;\n            return tempo >= minBpm && tempo <= maxBpm;\n          })\n          .map((feature: any) => feature.id);\n        const filteredTracks = tracks.filter((t: any) =>\n          filteredIds.includes(t.id)\n        );\n        setFilteredTracks(filteredTracks);\n      });\n  }, [api, tracks, minBpm, maxBpm]);\n\n  useEffect(() => {\n    // filter whenever tracks length changes\n    filterTracks();\n  }, [tracks.length]);\n\n  return filteredTracks;\n}\n","import * as React from \"react\";\nimport SpotifyContext from \"./SpotifyContext\";\n\nimport { useContext, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\ntype PlaylistData = {\n  external_urls: {\n    spotify: string;\n  };\n  images: string[];\n};\n\nconst useStyles = makeStyles({\n  root: {\n    padding: 32,\n  },\n  buttons: {\n    padding: 64,\n  },\n  button: {\n    marginLeft: 12,\n    marginRight: 12,\n  },\n  link: {\n    textDecoration: \"none\",\n  },\n  table: {\n    maxWidth: 500,\n    marginBottom: 40,\n  },\n});\n\nfunction usePlaylistDetails(id: string) {\n  const { api } = useContext(SpotifyContext);\n  const [playlistData, setPlaylistData] = useState<null | PlaylistData>(null);\n\n  api.getPlaylist(id).then(({ external_urls, images }: PlaylistData) => {\n    setPlaylistData({ external_urls, images });\n  });\n\n  return playlistData;\n}\n\nconst emptyFunction = () => {};\nexport default function Success() {\n  const { isAuth } = useContext(SpotifyContext);\n  const { playlistid: playlistID } = useParams<{ playlistid: string }>();\n  const playlistData = usePlaylistDetails(playlistID);\n\n  const classes = useStyles();\n\n  if (!isAuth) {\n    return <></>;\n  }\n\n  return (\n    <div>\n      <div>\n        Playlist Created:{\" \"}\n        <a href={playlistData?.external_urls.spotify}>\n          {playlistData?.external_urls.spotify ?? \"Loading Details...\"}\n        </a>\n      </div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={emptyFunction}\n        className={classes.button}\n      >\n        <Link\n          to={\"/spotibike/setup\"}\n          style={{ textDecoration: \"none\", color: \"white\" }}\n        >\n          Make Another\n        </Link>\n      </Button>\n    </div>\n  );\n}\n","import * as React from \"react\";\n\nimport { Route } from \"react-router-dom\";\nimport SpotifyContext from \"./SpotifyContext\";\nimport { useContext } from \"react\";\n\nconst HOSTED_APP_URI = \"https://rageandqq.github.io/spotibike/\";\nconst HOSTED_APP_DEV_URI = \"http://localhost:3000/spotibike/\";\n\nconst SPOTIFY_AUTH_URI = \"https://accounts.spotify.com/authorize\";\nconst CLIENT_ID = \"6fd3ee11d3a146ffad18854c9762964c\";\n\nconst isDev = process.env.NODE_ENV === \"development\";\nconst REDIRECT_URI = isDev ? HOSTED_APP_DEV_URI : HOSTED_APP_URI;\n\nconst SCOPES = [\n  \"playlist-read-private\",\n  \"playlist-modify-private\",\n  \"user-library-read\",\n];\n\nconst ALWAYS_AUTHENTICATE = isDev;\n\nconst getRedirectURI = () =>\n  encodeURI(\n    `${SPOTIFY_AUTH_URI}?client_id=${CLIENT_ID}&response_type=token&redirect_uri=${REDIRECT_URI}&scope=${SCOPES.join(\n      \" \"\n    )}&show_dialog=${ALWAYS_AUTHENTICATE}`\n  );\n\ninterface IProps {\n  children: React.ReactNode;\n  path: string;\n}\nexport default function AuthenticatedRoute(props: IProps) {\n  const { isAuth } = useContext(SpotifyContext);\n\n  if (!isAuth) {\n    window.location.href = getRedirectURI();\n  }\n\n  return <Route {...props} />;\n}\n","import * as React from \"react\";\nimport SpotifyContext from \"./SpotifyContext\";\n\nimport { useState, useMemo, useEffect, useCallback, useRef } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\n\ntype IProps = {\n  children: React.ReactNode;\n};\n\nfunction usePrevious<T>(value: T) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef<T>();\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n\nconst api = new SpotifyWebApi();\n\nexport default function SpotifyProvider({ children }: IProps) {\n  const [userID, setUserID] = useState<null | string>(null);\n  const hashParams = new URLSearchParams(\n    window.location.hash.substr(1) // skip the first char (#)\n  );\n\n  const accessTokenFromAuth = hashParams.get(\"access_token\");\n  const expiresInFromAuth = hashParams.get(\"exipres_in\");\n\n  const [accessToken, setAccessToken] = useState<string | null>(\n    accessTokenFromAuth\n  );\n  const [expiresAt, setExpiresAt] = useState<number | null>(\n    expiresInFromAuth != null ? +expiresInFromAuth : null // not a typo, use \"+\" to convert to number\n  );\n\n  const initAPI = useCallback((token) => {\n    api.setAccessToken(token);\n    api.getMe().then((data) => {\n      setUserID(data.id);\n    });\n  }, []);\n\n  // This is probbaly unnecessary... but if it changes, we should do something\n  const prevAccessTokenFromAuth = usePrevious<string | null>(\n    accessTokenFromAuth\n  );\n  const prevExpiresInFromAuth = usePrevious<string | null>(expiresInFromAuth);\n  useEffect(() => {\n    if (\n      accessTokenFromAuth != null &&\n      prevAccessTokenFromAuth !== accessTokenFromAuth\n    ) {\n      setAccessToken(accessTokenFromAuth);\n      initAPI(accessTokenFromAuth);\n    }\n    if (\n      expiresInFromAuth != null &&\n      prevExpiresInFromAuth !== expiresInFromAuth\n    ) {\n      setExpiresAt(new Date().getTime() + +expiresInFromAuth); // not a typo, use \"+\" to convert to number\n    }\n  }, [\n    prevAccessTokenFromAuth,\n    accessTokenFromAuth,\n    prevExpiresInFromAuth,\n    expiresInFromAuth,\n    initAPI,\n  ]);\n\n  const providerValue = useMemo(\n    () => ({\n      // accessToken,\n      expiresAt,\n      isAuth: accessToken != null, // TODO: figure out how to use expiresAt\n      api,\n      userID,\n    }),\n    [accessToken, expiresAt, userID]\n  );\n\n  return (\n    <SpotifyContext.Provider value={providerValue}>\n      {children}\n    </SpotifyContext.Provider>\n  );\n}\n","import Splash from \"./SplashScreen\";\nimport Setup from \"./Setup\";\nimport Songs from \"./Songs\";\nimport Success from \"./Success\";\nimport AuthenticatedRoute from \"./AuthenticatedRoute\";\n\nimport * as React from \"react\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SpotifyProvider from \"./SpotifyProvider\";\n\nfunction App() {\n  return (\n    <Router>\n      <SpotifyProvider>\n        <Switch>\n          <AuthenticatedRoute path=\"/spotibike/success/:playlistid\">\n            <Success />\n          </AuthenticatedRoute>\n          <AuthenticatedRoute path=\"/spotibike/songs\">\n            <Songs />\n          </AuthenticatedRoute>\n          <AuthenticatedRoute path=\"/spotibike/setup\">\n            <Setup />\n          </AuthenticatedRoute>\n          <Route path=\"/spotibike/\">\n            <Splash />\n          </Route>\n        </Switch>\n      </SpotifyProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nrequire(\"dotenv\").config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}